// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowPractice
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GildedRoseFeature : Xunit.IClassFixture<GildedRoseFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GildedRose.feature"
#line hidden
        
        public GildedRoseFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Gilded Rose", "\tIn order to track items state\r\n\tAs a shop owner\r\n\tI want tool to calculate item " +
                    "quality with each passing day", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(GildedRoseFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Item quality degrades and sell in date degrades with each passing date")]
        [Xunit.TraitAttribute("FeatureTitle", "Gilded Rose")]
        [Xunit.TraitAttribute("Description", "Item quality degrades and sell in date degrades with each passing date")]
        [Xunit.TraitAttribute("Category", "unit")]
        public virtual void ItemQualityDegradesAndSellInDateDegradesWithEachPassingDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Item quality degrades and sell in date degrades with each passing date", new string[] {
                        "unit"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Quality",
                        "Sell In"});
            table1.AddRow(new string[] {
                        "Item #1",
                        "10",
                        "4"});
            table1.AddRow(new string[] {
                        "Item #2",
                        "7",
                        "2"});
#line 8
 testRunner.Given("I have the following items in stock", ((string)(null)), table1, "Given ");
#line 12
 testRunner.When("1 day(s) pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Quality",
                        "Sell In"});
            table2.AddRow(new string[] {
                        "Item #1",
                        "9",
                        "3"});
            table2.AddRow(new string[] {
                        "Item #2",
                        "6",
                        "1"});
#line 13
 testRunner.Then("I have the following items in the stock", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Gilded Rose")]
        [Xunit.TraitAttribute("Description", "Processing items state in shop")]
        [Xunit.InlineDataAttribute("Item #1", "6", "3", "1", "5", new string[0])]
        [Xunit.InlineDataAttribute("Item #2", "7", "5", "2", "5", new string[0])]
        [Xunit.InlineDataAttribute("Item #3", "5", "0", "2", "1", new string[0])]
        [Xunit.InlineDataAttribute("Sulfuras, Hand of Ragnaros", "8", "6", "8", "8", new string[0])]
        public virtual void ProcessingItemsStateInShop(string name, string quality, string sellIn, string days, string resultQuality, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Processing items state in shop", exampleTags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given(string.Format("I have item {0} with quality {1} and Sell In days {2}", name, quality, sellIn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.When(string.Format("{0} day(s) pass", days), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then(string.Format("I get quality {0}", resultQuality), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GildedRoseFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GildedRoseFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
